{"version":3,"sources":["Table.tsx","components/datepicker.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","root","backgroundColor","icon","borderRadius","width","height","boxShadow","outline","outlineOffset","background","checkedIcon","display","backgroundImage","content","table","minWidth","tableKey","color","fontWeight","fontSize","textAlign","tableCell","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","TableComponent","rows","headCells","classes","React","useState","setOrder","setOrderBy","selected","page","dense","rowsPerPage","createSortHandler","property","event","handleRequestSort","emptyRows","Math","min","length","Fragment","TableContainer","style","marginTop","marginBottom","userSelect","Table","className","size","aria-label","TableHead","TableRow","headCell","TableCell","align","padding","disablePadding","TableSortLabel","active","id","onClick","label","TableBody","row","name","isItemSelected","indexOf","role","aria-checked","tabIndex","component","scope","href","transaction","target","amount0","amount1","token1","symbol","token0","format","fromUnixTime","timestamp","sender","recipient","value","amountUSD","displayType","thousandSeparator","prefix","decimalScale","colSpan","Datepicker","callback","placeholder","defaultValue","year","getFullYear","month","getMonth","day","getDate","myCustomLocale","months","weekDays","short","isWeekend","weekStartingIndex","getToday","gregorainTodayObject","toNativeDate","date","Date","getMonthLength","transformDigit","digit","nextMonth","previousMonth","openMonthSelector","openYearSelector","closeMonthSelector","closeYearSelector","defaultPlaceholder","from","to","digitSeparator","yearLetterSkip","isRtl","selectedDay","setSelectedDay","onChange","val","getUnixTime","renderInput","ref","readOnly","locale","shouldHighlightWeekends","calendarPopperPosition","colorPrimary","colorPrimaryLight","calendarClassName","SWAPS_QUERY","gql","AppContext","createContext","timestampFrom","timestampTo","Swaps","useContext","useQuery","variables","notifyOnNetworkStatusChange","loading","error","data","refetch","networkStatus","useEffect","NetworkStatus","CircularProgress","message","swaps","Form","children","wallet","setWallet","setSender","dateFrom","dateTo","setTimestampFrom","setTimestampTo","Provider","noValidate","autoComplete","TextField","e","Grid","container","alignItems","Button","variant","App","client","ApolloClient","uri","cache","InMemoryCache","themeMaterial","createMuiTheme","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","render","ApolloProvider","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.90b83458.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { format, fromUnixTime } from 'date-fns'\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport PaginationItem from \"@material-ui/lab/PaginationItem\";\r\n\r\n//import { exportExcel } from \"../../service\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \"&:hover\": {\r\n            backgroundColor: \"transparent\",\r\n        },\r\n    },\r\n    icon: {\r\n        borderRadius: 4,\r\n        width: 20,\r\n        height: 20,\r\n        boxShadow: \"0px 0px 5px rgba(19, 19, 19, 0.25)\",\r\n        backgroundColor: \"#f5f8fa\",\r\n        \"$root.Mui-focusVisible &\": {\r\n            outline: \"2px auto rgba(19,124,189,.6)\",\r\n            outlineOffset: 2,\r\n        },\r\n        \"input:disabled ~ &\": {\r\n            boxShadow: \"none\",\r\n            background: \"rgba(206,217,224,.5)\",\r\n        },\r\n    },\r\n    checkedIcon: {\r\n        backgroundColor: \"#E6BE00\",\r\n        \"&:before\": {\r\n            display: \"block\",\r\n            width: 20,\r\n            height: 20,\r\n            backgroundImage:\r\n                \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n                \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n                \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23000'/%3E%3C/svg%3E\\\")\",\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    tableKey: {\r\n        color: \"#7F7F7F\",\r\n        fontWeight: \"normal\",\r\n        fontSize: 14,\r\n        textAlign: \"left\",\r\n    },\r\n    tableCell: {\r\n        color: \"#151515\",\r\n        fontSize: 14,\r\n        textAlign: \"left\",\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === \"desc\" ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nexport const TableComponent = ({ rows, headCells }) => {\r\n    const classes = useStyles();\r\n\r\n    const [order, setOrder] = React.useState(\"asc\");\r\n    const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === \"asc\";\r\n        setOrder(isAsc ? \"desc\" : \"asc\");\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event, property);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    //@ts-ignore\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const prepareExcel = () => {\r\n        let data = rows;\r\n\r\n        if (selected.length > 0) {\r\n            //@ts-ignore\r\n            data = data.filter((item) => selected.includes(item.id));\r\n        }\r\n\r\n        //exportExcel({ title: \"employee\", data });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer style={{ marginTop: \"10px\", marginBottom: \"20px\", userSelect: \"none\" }}>\r\n                <Table className={classes.table} size=\"small\" aria-label=\"таблица\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* <TableCell padding=\"checkbox\">\r\n                                <Checkbox\r\n                                    indeterminate={selected.length > 0 && selected.length < rows.length}\r\n                                    checked={rows.length > 0 && selected.length === rows.length}\r\n                                    onChange={handleSelectAllClick}\r\n                                    inputProps={{ \"aria-label\": \"выбрать все\" }}\r\n                                />\r\n                            </TableCell> */}\r\n\r\n                            {headCells.map((headCell) => (\r\n                                <TableCell\r\n                                    key={headCell.id}\r\n                                    align={\"left\"}\r\n                                    padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n                                    //sortDirection={orderBy === headCell.id ? order : false}\r\n                                    className={classes.tableKey}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={orderBy === headCell.id}\r\n                                        //direction={orderBy === headCell.id ? order : \"asc\"}\r\n                                        onClick={createSortHandler(headCell.id)}\r\n                                    >\r\n                                        {headCell.label}\r\n                                    </TableSortLabel>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {stableSort(rows, getComparator(order, orderBy))\r\n                            // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((row, index) => {\r\n                                const isItemSelected = isSelected(row.id);\r\n                                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        role=\"checkbox\"\r\n                                        aria-checked={isItemSelected}\r\n                                        tabIndex={-1}\r\n                                        key={row.id}\r\n                                        selected={isItemSelected}\r\n                                    >\r\n                                        {/* <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                                checked={isItemSelected}\r\n                                                inputProps={{ \"aria-labelledby\": labelId }}\r\n                                                onClick={(event) => handleClick(event, row.id)}\r\n                                            />\r\n                                        </TableCell> */}\r\n                                        <TableCell className={classes.tableCell} component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <a href={`https://etherscan.io/tx/${row.transaction.id}`} target=\"_blank\">view tx</a>\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCell}>Swap {row.amount0 > 0 ? row.amount0 : row.amount1} {row.token1.symbol} for {row.amount0 > 0 ? row.amount1 * -1 : row.amount0 * -1} {row.token0.symbol}</TableCell>\r\n\r\n                                        <TableCell className={classes.tableCell}>{format(fromUnixTime(row.timestamp), \"yyyy-MM-dd HH:mm:ss\")}</TableCell>\r\n                                        <TableCell className={classes.tableCell}><a href={`https://etherscan.io/address/${row.sender}`} target=\"_blank\">{row.sender}</a></TableCell>\r\n                                        <TableCell className={classes.tableCell}><a href={`https://etherscan.io/address/${row.recipient}`} target=\"_blank\">{row.recipient}</a></TableCell>\r\n                                        <TableCell className={classes.tableCell}><NumberFormat value={row.amountUSD} displayType={'text'} thousandSeparator={true} prefix={'$'} decimalScale={2} /></TableCell>\r\n                                        {/* <TableCell className={classes.tableCell}>{row.origin}</TableCell> */}\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                <TableCell colSpan={9} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n};","import React, { useState } from \"react\";\r\nimport DatePicker from \"@hassanmojab/react-modern-calendar-datepicker\";\r\nimport { getUnixTime } from \"date-fns\"\r\nimport './datepicker.css'\r\n\r\nexport const Datepicker = ({ callback, value, placeholder }) => {\r\n    //@ts-ignore\r\n    let defaultValue = {\r\n        year: value.getFullYear(),\r\n        month: value.getMonth() + 1,\r\n        day: value.getDate(),\r\n    };\r\n\r\n    const myCustomLocale = {\r\n        // months list by order\r\n        months: [\r\n            \"Январь\",\r\n            \"Февраль\",\r\n            \"Март\",\r\n            \"Апрель\",\r\n            \"Май\",\r\n            \"Июнь\",\r\n            \"Июль\",\r\n            \"Август\",\r\n            \"Сентябрь\",\r\n            \"Октябрь\",\r\n            \"Ноябрь\",\r\n            \"Декабрь\",\r\n        ],\r\n\r\n        // week days by order\r\n        weekDays: [\r\n            {\r\n                name: \"Понедельник\",\r\n                short: \"ПН\",\r\n            },\r\n            {\r\n                name: \"Вторник\",\r\n                short: \"ВТ\",\r\n            },\r\n            {\r\n                name: \"Среда\",\r\n                short: \"СР\",\r\n            },\r\n            {\r\n                name: \"Четверг\",\r\n                short: \"ЧТ\",\r\n            },\r\n            {\r\n                name: \"Пятница\",\r\n                short: \"ПТ\",\r\n            },\r\n            {\r\n                name: \"Суббота\",\r\n                short: \"СБ\",\r\n                isWeekend: true,\r\n            },\r\n            {\r\n                name: \"Воскресенье\", // used for accessibility\r\n                short: \"ВС\", // displayed at the top of days' rows\r\n                isWeekend: true, // is it a formal weekend or not?\r\n            },\r\n        ],\r\n\r\n        // just play around with this number between 0 and 6\r\n        weekStartingIndex: 6,\r\n\r\n        // return a { year: number, month: number, day: number } object\r\n        getToday(gregorainTodayObject) {\r\n            return gregorainTodayObject;\r\n        },\r\n\r\n        // return a native JavaScript date here\r\n        toNativeDate(date) {\r\n            return new Date(date.year, date.month - 1, date.day);\r\n        },\r\n\r\n        // return a number for date's month length\r\n        getMonthLength(date) {\r\n            return new Date(date.year, date.month, 0).getDate();\r\n        },\r\n\r\n        // return a transformed digit to your locale\r\n        transformDigit(digit) {\r\n            return digit;\r\n        },\r\n\r\n        // texts in the date picker\r\n        nextMonth: \"Следующий\",\r\n        previousMonth: \"Предыдущий\",\r\n        openMonthSelector: \"Открыть\",\r\n        openYearSelector: \"Открыть\",\r\n        closeMonthSelector: \"Закрыть\",\r\n        closeYearSelector: \"Закрыть\",\r\n        defaultPlaceholder: \"\",\r\n\r\n        // for input range value\r\n        from: \"От\",\r\n        to: \"До\",\r\n\r\n        // used for input value when multi dates are selected\r\n        digitSeparator: \",\",\r\n\r\n        // if your provide -2 for example, year will be 2 digited\r\n        yearLetterSkip: 0,\r\n\r\n        // is your language rtl or ltr?\r\n        isRtl: false,\r\n    };\r\n\r\n    const [selectedDay, setSelectedDay] = useState(defaultValue);\r\n\r\n    const renderCustomInput = ({ ref }) => (\r\n        <input\r\n            readOnly\r\n            ref={ref}\r\n            placeholder={placeholder}\r\n            //@ts-ignore\r\n            value={selectedDay ? `${selectedDay.year}-${selectedDay.month}-${selectedDay.day}` : \"\"}\r\n            className=\"input datepicker__input\"\r\n        />\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"datepicker__wrapper\">\r\n                {placeholder}\r\n                <DatePicker\r\n                    value={selectedDay}\r\n                    onChange={(val) => {\r\n                        //@ts-ignore\r\n                        callback(getUnixTime((new Date(val.year, val.month - 1, val.day, 0, 0, 0))));\r\n                        //@ts-ignore\r\n                        setSelectedDay(val);\r\n                    }}\r\n                    renderInput={renderCustomInput}\r\n                    locale={myCustomLocale}\r\n                    shouldHighlightWeekends\r\n                    // maximumDate={utils().getToday()}\r\n                    calendarPopperPosition=\"bottom\"\r\n                    colorPrimary=\"#2fa8ec\"\r\n                    colorPrimaryLight=\"#2fa8ec\"\r\n                    calendarClassName=\"datepicker\"\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};","import React, { useState, useEffect, useContext } from 'react';\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport { getUnixTime } from \"date-fns\"\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TableComponent } from './Table';\nimport { Datepicker } from './components/datepicker';\n//, timestamp_gte: \"10000000000\", timestamp_lte: \"10000000000\"\nconst SWAPS_QUERY = gql`\n  query swaps($sender: String, $timestampFrom: Int, $timestampTo: Int) {\n    swaps(first: 200, orderBy: timestamp, orderDirection: asc, where: { sender: $sender, timestamp_gte: $timestampFrom, timestamp_lte: $timestampTo }) {\n      id\n      transaction { id }\n      sender\n      timestamp\n      sender\n      recipient\n      origin\n      token0 { symbol, name }\n      token1 { symbol, name }\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`;\n\nconst AppContext = React.createContext({ sender: '', timestampFrom: 0, timestampTo: getUnixTime(new Date()) });\n\nconst Swaps = () => {\n  const { sender, timestampFrom, timestampTo } = useContext(AppContext);\n\n  const { loading, error, data, refetch, networkStatus } = useQuery(SWAPS_QUERY, {\n    variables: { sender, timestampFrom, timestampTo },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [sender, timestampFrom, timestampTo])\n\n  if (loading || networkStatus === NetworkStatus.refetch) {\n    return <CircularProgress size={20} />;\n  }\n\n  if (error) {\n    return <>{error.message}</>;\n  }\n\n  return (\n    <>\n      {data && data.swaps && data.swaps.length > 0 && <TableComponent rows={data.swaps} headCells={headCells} />}\n    </>\n  )\n};\n\nconst headCells = [\n  { id: \"tx\", disablePadding: true, label: \"TX\" },\n  { id: \"description\", disablePadding: false, label: \"Description\" },\n  { id: \"date\", disablePadding: false, label: \"Date\" },\n  { id: \"sender\", disablePadding: false, label: \"Sender\" },\n  { id: \"recipient\", disablePadding: false, label: \"Recipient\" },\n  { id: \"amountUSD\", disablePadding: false, label: \"USD amount\" },\n];\n\nconst App = () => {\n\n\n  return (\n    <div>\n      <Form>\n        <Swaps />\n      </Form>\n    </div>\n  )\n};\n\n\nfunction Form({ children }) {\n  const [wallet, setWallet] = useState(\"0xe592427a0aece92de3edee1f18e0157c05861564\");\n  const [sender, setSender] = useState(\"\");\n  const [dateFrom, setDateFrom] = React.useState(new Date('2021-01-01T00:00:00'));\n  const [dateTo, setDateTo] = React.useState(new Date('2021-06-01T00:00:00'));\n  const [timestampFrom, setTimestampFrom] = React.useState(0);\n  const [timestampTo, setTimestampTo] = React.useState(getUnixTime(new Date()));\n\n  const update = () => {\n    setSender(wallet)\n  }\n\n  const handleDateFromChange = (date) => {\n    setTimestampFrom(date);\n  };\n\n  const handleDateToChange = (date) => {\n    setTimestampTo(date);\n  };\n\n  return (\n    <div>\n      <AppContext.Provider value={{ sender, timestampFrom, timestampTo }}>\n        <form noValidate autoComplete=\"off\">\n          <TextField label=\"Wallet address\" value={wallet} onChange={e => setWallet(e.target.value)} style={{ minWidth: 400 }} />\n        </form>\n        <br />\n\n        <Grid container alignItems=\"flex-start\">\n          <Datepicker callback={handleDateFromChange} value={dateFrom} placeholder=\"Date from\" />\n          <Datepicker callback={handleDateToChange} value={dateTo} placeholder=\"Date to\" />\n        </Grid>\n\n        <br />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={update}>Search</Button>\n        <br />\n        {children}\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { createMuiTheme, ThemeProvider as ThemeProviderMaterial } from \"@material-ui/core/styles\";\nimport 'fontsource-roboto';\n\nimport App from './App';\n\nconst GRAPHQL_API_URL = 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-testing';\n\nconst client = new ApolloClient({\n  uri: GRAPHQL_API_URL,\n  cache: new InMemoryCache()\n});\n\nconst themeMaterial = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: \"#0E6FE2\",\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: \"#000\",\n      main: \"#0E6FE2\",\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: \"#000\",\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n\nrender(\n  <ApolloProvider client={client}>\n    <ThemeProviderMaterial theme={themeMaterial}>\n      <App />\n    </ThemeProviderMaterial>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}