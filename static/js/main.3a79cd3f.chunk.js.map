{"version":3,"sources":["store/appSlice.tsx","store/dataSlice.tsx","store/index.tsx","constants.tsx","gql.tsx","components/Datepicker.tsx","components/DataTable.tsx","App.tsx","index.tsx"],"names":["initialState","rangeCheckbox","wallet","walletType","timestampFrom","timestampTo","getUnixTime","Date","items","offset","appSlice","createSlice","name","reducers","setRangeCheckbox","state","action","payload","setWallet","setWalletType","setTimestampFrom","setTimestampTo","setItems","Number","prevOffset","nextOffset","actions","selectRangeCheckbox","app","selectWallet","selectWalletType","selectTimestampFrom","selectTimestampTo","selectItems","selectOffset","dataSlice","loading","data","setLoading","setData","selectLoading","selectData","combineReducers","appReducer","dataReducer","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","GRAPHQL_API_URL","SWAPS_QUERY_SENDER","gql","SWAPS_QUERY_RECIPIENT","Datepicker","callback","value","placeholder","defaultValue","year","getFullYear","month","getMonth","day","getDate","myCustomLocale","months","weekDays","short","isWeekend","weekStartingIndex","getToday","gregorainTodayObject","toNativeDate","date","getMonthLength","transformDigit","digit","nextMonth","previousMonth","openMonthSelector","openYearSelector","closeMonthSelector","closeYearSelector","defaultPlaceholder","from","to","digitSeparator","yearLetterSkip","isRtl","useState","selectedDay","setSelectedDay","Fragment","className","onChange","val","renderInput","ref","readOnly","locale","shouldHighlightWeekends","calendarPopperPosition","colorPrimary","colorPrimaryLight","calendarClassName","DataTable","columns","React","useMemo","Header","accessor","row","href","transaction","id","target","rel","amount0","amount1","token1","symbol","token0","format","fromUnixTime","timestamp","sender","recipient","amountUSD","displayType","thousandSeparator","prefix","decimalScale","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isNumeric","render","span","pl","isSorted","isSortedDesc","TriangleDown","aria-label","TriangleUp","getRowProps","cells","cell","getCellProps","App","dispatch","useDispatch","toast","useToast","useSelector","dateFrom","dateTo","find","a","Web3","utils","isAddress","title","description","status","duration","isClosable","request","res","swaps","JSON","stringify","undefined","console","error","mt","mb","spacing","maxW","align","variant","maxWidth","size","e","selected","autoComplete","defaultChecked","checked","container","justifyContent","colorScheme","onClick","isIndeterminate","length","justify","ml","mr","disabled","exportWS","XLSX","json_to_sheet","wb","book_new","book_append_sheet","writeFile","GlobalStyles","css","styles","document","getElementById"],"mappings":"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","file":"static/js/main.3a79cd3f.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getUnixTime } from \"date-fns\"\r\nimport { RootState } from \"./\";\r\n\r\ninterface IinitialState {\r\n  rangeCheckbox: boolean\r\n  wallet: string\r\n  walletType: string\r\n  timestampFrom: number\r\n  timestampTo: number\r\n  items: number\r\n  offset: number\r\n}\r\n\r\nconst initialState: IinitialState = {\r\n  rangeCheckbox: false,\r\n  wallet: \"\", //0xe592427a0aece92de3edee1f18e0157c05861564\r\n  walletType: \"sender\",\r\n  timestampFrom: 0,\r\n  timestampTo: getUnixTime((new Date())),\r\n  items: 200,\r\n  offset: 0,\r\n}\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {\r\n    setRangeCheckbox: (state, action) => {\r\n      state.rangeCheckbox = action.payload;\r\n    },\r\n    setWallet: (state, action) => {\r\n      state.wallet = action.payload;\r\n    },\r\n    setWalletType: (state, action) => {\r\n      state.walletType = action.payload;\r\n    },\r\n    setTimestampFrom: (state, action) => {\r\n      state.timestampFrom = action.payload;\r\n    },\r\n    setTimestampTo: (state, action) => {\r\n      state.timestampTo = action.payload;\r\n    },\r\n    setItems: (state, action) => {\r\n      state.offset = 0;\r\n      state.items = Number(action.payload);\r\n    },\r\n    prevOffset: (state) => {\r\n      if (state.offset > state.items) {\r\n        state.offset -= state.items;\r\n      } else {\r\n        state.offset = 0;\r\n      }\r\n    },\r\n    nextOffset: (state) => {\r\n      state.offset += state.items;\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setRangeCheckbox, setWallet, setWalletType, setTimestampFrom, setTimestampTo, setItems, prevOffset, nextOffset } = appSlice.actions;\r\n\r\nexport const selectRangeCheckbox = (state: RootState) => state.app.rangeCheckbox;\r\nexport const selectWallet = (state: RootState) => state.app.wallet;\r\nexport const selectWalletType = (state: RootState) => state.app.walletType;\r\nexport const selectTimestampFrom = (state: RootState) => state.app.rangeCheckbox ? state.app.timestampFrom : 0;\r\nexport const selectTimestampTo = (state: RootState) => state.app.rangeCheckbox ? state.app.timestampTo : getUnixTime((new Date()));\r\nexport const selectItems = (state: RootState) => state.app.items;\r\nexport const selectOffset = (state: RootState) => state.app.offset;\r\n\r\nexport default appSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"./\";\r\n\r\ninterface IinitialState {\r\n  loading: boolean\r\n  data: any\r\n}\r\n\r\nconst initialState: IinitialState = {\r\n  loading: false,\r\n  data: []\r\n}\r\n\r\nexport const dataSlice = createSlice({\r\n  name: \"data\",\r\n  initialState,\r\n  reducers: {\r\n    setLoading: (state, action) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setLoading } = dataSlice.actions;\r\nexport const { setData } = dataSlice.actions;\r\n\r\nexport const selectLoading = (state: RootState) => state.data.loading;\r\nexport const selectData = (state: RootState) => state.data.data;\r\n\r\nexport default dataSlice.reducer;","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport appReducer from \"./appSlice\";\r\nimport dataReducer from \"./dataSlice\";\r\n\r\nconst reducers = combineReducers({\r\n  app: appReducer,\r\n  data: dataReducer\r\n});\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"data\", \"router\"]\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false\r\n    })\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nlet persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","export const GRAPHQL_API_URL = 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-testing';","import { gql } from 'graphql-request'\r\n\r\nexport const SWAPS_QUERY_SENDER = gql`\r\nquery swaps($wallet: String, $timestampFrom: Int, $timestampTo: Int, $items: Int, $offset: Int) {\r\n  swaps(first: $items, skip: $offset, orderBy: timestamp, orderDirection: asc, where: { sender: $wallet, timestamp_gte: $timestampFrom, timestamp_lte: $timestampTo }) {\r\n    id\r\n    transaction { id }\r\n    timestamp\r\n    sender\r\n    recipient\r\n    origin\r\n    token0 { symbol, name }\r\n    token1 { symbol, name }\r\n    amount0\r\n    amount1\r\n    amountUSD\r\n  }\r\n}\r\n`;\r\n\r\nexport const SWAPS_QUERY_RECIPIENT = gql`\r\n  query swaps($wallet: String, $timestampFrom: Int, $timestampTo: Int, $items: Int, $offset: Int) {\r\n    swaps(first: $items, skip: $offset, orderBy: timestamp, orderDirection: asc, where: { recipient: $wallet, timestamp_gte: $timestampFrom, timestamp_lte: $timestampTo }) {\r\n      id\r\n      transaction { id }\r\n      timestamp\r\n      sender\r\n      recipient\r\n      origin\r\n      token0 { symbol, name }\r\n      token1 { symbol, name }\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`;\r\n\r\n// offset to 0\r\n// prev next","import React, { useState } from \"react\";\r\nimport { FormLabel } from \"@chakra-ui/react\"\r\nimport DatePicker from \"@hassanmojab/react-modern-calendar-datepicker\";\r\nimport { getUnixTime } from \"date-fns\"\r\nimport './Datepicker.css'\r\n\r\nexport const Datepicker = ({ callback, value, placeholder }) => {\r\n    //@ts-ignore\r\n    let defaultValue = {\r\n        year: value.getFullYear(),\r\n        month: value.getMonth() + 1,\r\n        day: value.getDate(),\r\n    };\r\n\r\n    const myCustomLocale = {\r\n        // months list by order\r\n        months: [\r\n            \"Январь\",\r\n            \"Февраль\",\r\n            \"Март\",\r\n            \"Апрель\",\r\n            \"Май\",\r\n            \"Июнь\",\r\n            \"Июль\",\r\n            \"Август\",\r\n            \"Сентябрь\",\r\n            \"Октябрь\",\r\n            \"Ноябрь\",\r\n            \"Декабрь\",\r\n        ],\r\n\r\n        // week days by order\r\n        weekDays: [\r\n            {\r\n                name: \"Понедельник\",\r\n                short: \"ПН\",\r\n            },\r\n            {\r\n                name: \"Вторник\",\r\n                short: \"ВТ\",\r\n            },\r\n            {\r\n                name: \"Среда\",\r\n                short: \"СР\",\r\n            },\r\n            {\r\n                name: \"Четверг\",\r\n                short: \"ЧТ\",\r\n            },\r\n            {\r\n                name: \"Пятница\",\r\n                short: \"ПТ\",\r\n            },\r\n            {\r\n                name: \"Суббота\",\r\n                short: \"СБ\",\r\n                isWeekend: true,\r\n            },\r\n            {\r\n                name: \"Воскресенье\", // used for accessibility\r\n                short: \"ВС\", // displayed at the top of days' rows\r\n                isWeekend: true, // is it a formal weekend or not?\r\n            },\r\n        ],\r\n\r\n        // just play around with this number between 0 and 6\r\n        weekStartingIndex: 6,\r\n\r\n        // return a { year: number, month: number, day: number } object\r\n        getToday(gregorainTodayObject) {\r\n            return gregorainTodayObject;\r\n        },\r\n\r\n        // return a native JavaScript date here\r\n        toNativeDate(date) {\r\n            return new Date(date.year, date.month - 1, date.day);\r\n        },\r\n\r\n        // return a number for date's month length\r\n        getMonthLength(date) {\r\n            return new Date(date.year, date.month, 0).getDate();\r\n        },\r\n\r\n        // return a transformed digit to your locale\r\n        transformDigit(digit) {\r\n            return digit;\r\n        },\r\n\r\n        // texts in the date picker\r\n        nextMonth: \"Следующий\",\r\n        previousMonth: \"Предыдущий\",\r\n        openMonthSelector: \"Открыть\",\r\n        openYearSelector: \"Открыть\",\r\n        closeMonthSelector: \"Закрыть\",\r\n        closeYearSelector: \"Закрыть\",\r\n        defaultPlaceholder: \"\",\r\n\r\n        // for input range value\r\n        from: \"От\",\r\n        to: \"До\",\r\n\r\n        // used for input value when multi dates are selected\r\n        digitSeparator: \",\",\r\n\r\n        // if your provide -2 for example, year will be 2 digited\r\n        yearLetterSkip: 0,\r\n\r\n        // is your language rtl or ltr?\r\n        isRtl: false,\r\n    };\r\n\r\n    const [selectedDay, setSelectedDay] = useState(defaultValue);\r\n\r\n    const renderCustomInput = ({ ref }) => (\r\n        <input\r\n            readOnly\r\n            ref={ref}\r\n            placeholder={placeholder}\r\n            //@ts-ignore\r\n            value={selectedDay ? `${selectedDay.day}-${selectedDay.month}-${selectedDay.year}` : \"\"}\r\n            className=\"input datepicker__input\"\r\n        />\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"datepicker__wrapper\">\r\n                <FormLabel>{placeholder}</FormLabel>\r\n                <DatePicker\r\n                    value={selectedDay}\r\n                    onChange={(val) => {\r\n                        //@ts-ignore\r\n                        callback(getUnixTime((new Date(val.year, val.month - 1, val.day, 0, 0, 0))));\r\n                        //@ts-ignore\r\n                        setSelectedDay(val);\r\n                    }}\r\n                    renderInput={renderCustomInput}\r\n                    locale={myCustomLocale}\r\n                    shouldHighlightWeekends\r\n                    // maximumDate={utils().getToday()}\r\n                    calendarPopperPosition=\"bottom\"\r\n                    colorPrimary=\"#2fa8ec\"\r\n                    colorPrimaryLight=\"#2fa8ec\"\r\n                    calendarClassName=\"datepicker\"\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};","import React from 'react';\r\nimport { format, fromUnixTime } from 'date-fns'\r\nimport NumberFormat from 'react-number-format';\r\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\"\r\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\"\r\nimport { useTable, useSortBy } from \"react-table\"\r\n\r\nexport function DataTable({ data }) {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: \"TX\",\r\n                accessor: row => <a href={`https://etherscan.io/tx/${row.transaction.id}`} target=\"_blank\" rel=\"noreferrer noopener\">view tx</a>,\r\n            },\r\n            {\r\n                Header: \"Description\",\r\n                accessor: row => `Swap ${row.amount0 > 0 ? row.amount0 : row.amount1} ${row.token1.symbol} for ${row.amount0 > 0 ? row.amount1 * -1 : row.amount0 * -1} ${row.token0.symbol}`,\r\n            },\r\n            {\r\n                Header: \"Date\",\r\n                accessor: row => format(fromUnixTime(row.timestamp), \"yyyy-MM-dd HH:mm:ss\"),\r\n            },\r\n            {\r\n                Header: \"Sender\",\r\n                accessor: row => <a href={`https://etherscan.io/address/${row.sender}`} target=\"_blank\" rel=\"noreferrer noopener\">{row.sender}</a>,\r\n            },\r\n            {\r\n                Header: \"Recipient\",\r\n                accessor: row => <a href={`https://etherscan.io/address/${row.recipient}`} target=\"_blank\" rel=\"noreferrer noopener\">{row.recipient}</a>,\r\n            },\r\n            {\r\n                Header: \"USD amount\",\r\n                accessor: row => <NumberFormat value={row.amountUSD} displayType={'text'} thousandSeparator={true} prefix={'$'} decimalScale={2} />,\r\n            },\r\n        ],\r\n        [],\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({ columns, data }, useSortBy)\r\n\r\n    return (\r\n        <Table {...getTableProps()}>\r\n            <Thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <Tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <Th\r\n                                {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                isNumeric={column.isNumeric}\r\n                            >\r\n                                {column.render(\"Header\")}\r\n                                <chakra.span pl=\"4\">\r\n                                    {column.isSorted ? (\r\n                                        column.isSortedDesc ? (\r\n                                            <TriangleDownIcon aria-label=\"sorted descending\" />\r\n                                        ) : (\r\n                                            <TriangleUpIcon aria-label=\"sorted ascending\" />\r\n                                        )\r\n                                    ) : null}\r\n                                </chakra.span>\r\n                            </Th>\r\n                        ))}\r\n                    </Tr>\r\n                ))}\r\n            </Thead>\r\n            <Tbody {...getTableBodyProps()}>\r\n                {rows.map((row) => {\r\n                    prepareRow(row)\r\n                    return (\r\n                        <Tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell) => (\r\n                                <Td {...cell.getCellProps()} isNumeric={cell.column.isNumeric}>\r\n                                    {cell.render(\"Cell\")}\r\n                                </Td>\r\n                            ))}\r\n                        </Tr>\r\n                    )\r\n                })}\r\n            </Tbody>\r\n        </Table>\r\n    )\r\n}","import React from 'react';\r\nimport Web3 from 'web3';\r\nimport XLSX from \"xlsx\";\r\nimport { VStack, Container, Flex, FormControl, FormLabel, Select, Input, Checkbox, ButtonGroup, Button, Progress, useToast } from \"@chakra-ui/react\"\r\nimport { request } from 'graphql-request'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectRangeCheckbox, setRangeCheckbox, selectWallet, setWallet, selectWalletType, setWalletType, selectTimestampFrom, setTimestampFrom, selectTimestampTo, setTimestampTo, selectItems, setItems, selectOffset, prevOffset, nextOffset } from \"./store/appSlice\";\r\nimport { selectLoading, setLoading, selectData, setData } from \"./store/dataSlice\";\r\nimport { GRAPHQL_API_URL } from './constants';\r\nimport { SWAPS_QUERY_SENDER, SWAPS_QUERY_RECIPIENT } from './gql';\r\nimport { Datepicker } from './components/Datepicker';\r\nimport { DataTable } from './components/DataTable';\r\n\r\nexport default function App() {\r\n    const dispatch = useDispatch();\r\n    const toast = useToast()\r\n\r\n    const rangeCheckbox = useSelector(selectRangeCheckbox);\r\n    const wallet = useSelector(selectWallet);\r\n    const walletType = useSelector(selectWalletType);\r\n    const timestampFrom = useSelector(selectTimestampFrom);\r\n    const timestampTo = useSelector(selectTimestampTo);\r\n    const items = useSelector(selectItems);\r\n    const offset = useSelector(selectOffset);\r\n\r\n    const loading = useSelector(selectLoading);\r\n    const data = useSelector(selectData);\r\n\r\n    const dateFrom = React.useMemo(() => new Date('2021-01-01T00:00:00'), []);\r\n    const dateTo = React.useMemo(() => new Date(), []);\r\n\r\n    const handleDateFromChange = (date) => {\r\n        dispatch(setTimestampFrom(date));\r\n    };\r\n\r\n    const handleDateToChange = (date) => {\r\n        dispatch(setTimestampTo(date));\r\n    };\r\n\r\n    const find = async () => {\r\n        if (loading) { return }\r\n\r\n        if (!Web3.utils.isAddress(wallet)) {\r\n            toast({\r\n                title: \"Invalid wallet address.\",\r\n                description: \"Please enter a valid wallet address.\",\r\n                status: \"error\",\r\n                duration: 3000,\r\n                isClosable: true,\r\n            })\r\n            return\r\n        }\r\n\r\n        try {\r\n            dispatch(setLoading(true))\r\n\r\n            if (walletType === \"sender\") {\r\n                const res = await request(GRAPHQL_API_URL, SWAPS_QUERY_SENDER, {\r\n                    wallet,\r\n                    timestampFrom,\r\n                    timestampTo,\r\n                    items,\r\n                    offset\r\n                })\r\n                dispatch(setData(res.swaps))\r\n            } else {\r\n                const res = await request(GRAPHQL_API_URL, SWAPS_QUERY_RECIPIENT, {\r\n                    wallet,\r\n                    timestampFrom,\r\n                    timestampTo,\r\n                    items,\r\n                    offset\r\n                })\r\n                dispatch(setData(res.swaps))\r\n            }\r\n\r\n            dispatch(setLoading(false))\r\n\r\n        } catch (e) {\r\n            toast({\r\n                title: \"An error occured.\",\r\n                description: JSON.stringify(e, undefined, 2),\r\n                status: \"error\",\r\n                duration: 3000,\r\n                isClosable: true,\r\n            })\r\n            console.error(JSON.stringify(e, undefined, 2))\r\n            dispatch(setLoading(false))\r\n        }\r\n    };\r\n\r\n    const exportExcel = () => {\r\n        if (loading || data.length === 0) { return }\r\n\r\n        let exportWS = XLSX.utils.json_to_sheet(data);\r\n        let wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, exportWS, \"tx\");\r\n        XLSX.writeFile(wb, \"tx.xlsx\");\r\n    };\r\n\r\n    return (<>\r\n        <VStack mt={10} mb={10} spacing={4}>\r\n            <Container maxW=\"container.sm\">\r\n                <FormControl id=\"email\">\r\n                    <FormLabel mb={3}>\r\n                        <Flex align=\"center\">\r\n                            Enter&nbsp;\r\n                            <Select variant=\"filled\" maxWidth={120} size=\"sm\" onChange={e => dispatch(setWalletType(e.target.value))}>\r\n                                <option value=\"sender\" selected={walletType === \"sender\"}>Sender</option>\r\n                                <option value=\"recipient\" selected={walletType === \"recipient\"}>Recipient</option>\r\n                            </Select>&nbsp;wallet address\r\n                        </Flex>\r\n                    </FormLabel>\r\n                    <Input placeholder=\"Enter wallet address\" size=\"md\" autoComplete=\"off\" value={wallet} onChange={e => dispatch(setWallet(e.target.value))} />\r\n                </FormControl>\r\n            </Container>\r\n            <Container maxW=\"container.sm\">\r\n                <Checkbox defaultChecked={rangeCheckbox} onChange={e => dispatch(setRangeCheckbox(e.target.checked))}>Specify time range</Checkbox>\r\n                {rangeCheckbox && <Flex mt={2} mb={4} container justifyContent=\"space-between\">\r\n                    <Datepicker callback={handleDateFromChange} value={dateFrom} placeholder=\"Date from\" />\r\n                    <Datepicker callback={handleDateToChange} value={dateTo} placeholder=\"Date to\" />\r\n                </Flex>}\r\n            </Container>\r\n            <Button variant=\"solid\" colorScheme=\"blue\" onClick={find}>Find transactions</Button>\r\n        </VStack>\r\n\r\n        {loading ? <Progress size=\"xs\" isIndeterminate /> : (data.length > 0 && <>\r\n            <Flex align=\"center\" justify=\"space-between\" ml={4} mr={4} mb={4}>\r\n                <ButtonGroup variant=\"outline\" spacing=\"2\">\r\n                    <Button onClick={() => { dispatch(prevOffset()); find(); }} disabled={offset === 0}>Previous</Button>\r\n                    <Select variant=\"filled\" maxWidth={140} size=\"md\" onChange={e => { dispatch(setItems(e.target.value)); find(); }}>\r\n                        <option value=\"100\" selected={items === 100}>100 records</option>\r\n                        <option value=\"200\" selected={items === 200}>200 records</option>\r\n                        <option value=\"300\" selected={items === 300}>300 records</option>\r\n                        <option value=\"400\" selected={items === 400}>400 records</option>\r\n                        <option value=\"500\" selected={items === 500}>500 records</option>\r\n                    </Select>\r\n                    <Button onClick={() => { dispatch(nextOffset()); find(); }} disabled={data.length < offset}>Next</Button>\r\n                </ButtonGroup>\r\n\r\n                <Button variant=\"outline\" colorScheme=\"green\" onClick={exportExcel}>Download Excel</Button>\r\n            </Flex>\r\n\r\n            <DataTable data={data} />\r\n        </>)}\r\n    </>)\r\n}\r\n","import { render } from 'react-dom';\nimport 'focus-visible/dist/focus-visible';\nimport 'fontsource-roboto';\nimport { ChakraProvider, CSSReset } from \"@chakra-ui/react\"\nimport { css, Global } from '@emotion/react';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./store\";\nimport App from './App';\n\nconst GlobalStyles = css`\n  /*\n    This will hide the focus indicator if the element receives focus via the mouse,\n    but it will still show up on keyboard focus.\n  */\n  .js-focus-visible :focus:not([data-focus-visible-added]) {\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nrender(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ChakraProvider>\n        <CSSReset />\n        <Global styles={GlobalStyles} />\n        <App />\n      </ChakraProvider>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}