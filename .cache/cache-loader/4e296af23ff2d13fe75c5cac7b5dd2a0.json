{"remainingRequest":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\node_modules\\ts-loader\\index.js??ref--16-1!C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\components\\datepicker.tsx","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\components\\datepicker.tsx","mtime":1623764831210},{"path":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623606005702},{"path":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\node_modules\\ts-loader\\index.js","mtime":1623606013480}],"contextDependencies":[],"result":["import React, { useState } from \"react\";\r\nimport DatePicker from \"react-modern-calendar-datepicker\";\r\nimport { parse } from \"date-fns\";\r\nimport './datepicker.css';\r\nexport var Datepicker = function (props) {\r\n    var defaultValue = null;\r\n    if (props.value) {\r\n        var defaultDate = parse(props.value, \"yyyy-MM-dd\", new Date());\r\n        defaultValue = {\r\n            year: defaultDate.getFullYear(),\r\n            month: defaultDate.getMonth() + 1,\r\n            day: defaultDate.getDate(),\r\n        };\r\n    }\r\n    var myCustomLocale = {\r\n        months: [\r\n            \"Январь\",\r\n            \"Февраль\",\r\n            \"Март\",\r\n            \"Апрель\",\r\n            \"Май\",\r\n            \"Июнь\",\r\n            \"Июль\",\r\n            \"Август\",\r\n            \"Сентябрь\",\r\n            \"Октябрь\",\r\n            \"Ноябрь\",\r\n            \"Декабрь\",\r\n        ],\r\n        weekDays: [\r\n            {\r\n                name: \"Понедельник\",\r\n                short: \"ПН\",\r\n            },\r\n            {\r\n                name: \"Вторник\",\r\n                short: \"ВТ\",\r\n            },\r\n            {\r\n                name: \"Среда\",\r\n                short: \"СР\",\r\n            },\r\n            {\r\n                name: \"Четверг\",\r\n                short: \"ЧТ\",\r\n            },\r\n            {\r\n                name: \"Пятница\",\r\n                short: \"ПТ\",\r\n            },\r\n            {\r\n                name: \"Суббота\",\r\n                short: \"СБ\",\r\n                isWeekend: true,\r\n            },\r\n            {\r\n                name: \"Воскресенье\",\r\n                short: \"ВС\",\r\n                isWeekend: true,\r\n            },\r\n        ],\r\n        weekStartingIndex: 6,\r\n        getToday: function (gregorainTodayObject) {\r\n            return gregorainTodayObject;\r\n        },\r\n        toNativeDate: function (date) {\r\n            return new Date(date.year, date.month - 1, date.day);\r\n        },\r\n        getMonthLength: function (date) {\r\n            return new Date(date.year, date.month, 0).getDate();\r\n        },\r\n        transformDigit: function (digit) {\r\n            return digit;\r\n        },\r\n        nextMonth: \"Следующий\",\r\n        previousMonth: \"Предыдущий\",\r\n        openMonthSelector: \"Открыть\",\r\n        openYearSelector: \"Открыть\",\r\n        closeMonthSelector: \"Закрыть\",\r\n        closeYearSelector: \"Закрыть\",\r\n        defaultPlaceholder: \"\",\r\n        from: \"От\",\r\n        to: \"До\",\r\n        digitSeparator: \",\",\r\n        yearLetterSkip: 0,\r\n        isRtl: false,\r\n    };\r\n    var _a = useState(defaultValue), selectedDay = _a[0], setSelectedDay = _a[1];\r\n    var renderCustomInput = function (_a) {\r\n        var ref = _a.ref;\r\n        return (React.createElement(\"input\", { readOnly: true, ref: ref, placeholder: props.placeholder, value: selectedDay ? selectedDay.day + \"/\" + selectedDay.month + \"/\" + selectedDay.year : \"\", className: \"input datepicker__input\" }));\r\n    };\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", { className: \"datepicker__wrapper\" },\r\n            \"Date from\",\r\n            React.createElement(DatePicker, { value: selectedDay, onChange: function (value) {\r\n                    props.callback(value);\r\n                    setSelectedDay(value);\r\n                }, renderInput: renderCustomInput, locale: myCustomLocale, shouldHighlightWeekends: true, calendarPopperPosition: \"bottom\", colorPrimary: \"#2fa8ec\", colorPrimaryLight: \"#2fa8ec\", calendarClassName: \"datepicker\" }))));\r\n};\r\n",{"version":3,"file":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\components\\datepicker.tsx","sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\components\\datepicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport DatePicker, { utils } from \"react-modern-calendar-datepicker\";\r\nimport { parse } from \"date-fns\";\r\nimport './datepicker.css'\r\n\r\nexport const Datepicker = (props) => {\r\n    let defaultValue = null;\r\n\r\n    if (props.value) {\r\n        let defaultDate = parse(props.value, \"yyyy-MM-dd\", new Date());\r\n\r\n        defaultValue = {\r\n            year: defaultDate.getFullYear(),\r\n            month: defaultDate.getMonth() + 1,\r\n            day: defaultDate.getDate(),\r\n        };\r\n    }\r\n\r\n    const myCustomLocale = {\r\n        // months list by order\r\n        months: [\r\n            \"Январь\",\r\n            \"Февраль\",\r\n            \"Март\",\r\n            \"Апрель\",\r\n            \"Май\",\r\n            \"Июнь\",\r\n            \"Июль\",\r\n            \"Август\",\r\n            \"Сентябрь\",\r\n            \"Октябрь\",\r\n            \"Ноябрь\",\r\n            \"Декабрь\",\r\n        ],\r\n\r\n        // week days by order\r\n        weekDays: [\r\n            {\r\n                name: \"Понедельник\",\r\n                short: \"ПН\",\r\n            },\r\n            {\r\n                name: \"Вторник\",\r\n                short: \"ВТ\",\r\n            },\r\n            {\r\n                name: \"Среда\",\r\n                short: \"СР\",\r\n            },\r\n            {\r\n                name: \"Четверг\",\r\n                short: \"ЧТ\",\r\n            },\r\n            {\r\n                name: \"Пятница\",\r\n                short: \"ПТ\",\r\n            },\r\n            {\r\n                name: \"Суббота\",\r\n                short: \"СБ\",\r\n                isWeekend: true,\r\n            },\r\n            {\r\n                name: \"Воскресенье\", // used for accessibility\r\n                short: \"ВС\", // displayed at the top of days' rows\r\n                isWeekend: true, // is it a formal weekend or not?\r\n            },\r\n        ],\r\n\r\n        // just play around with this number between 0 and 6\r\n        weekStartingIndex: 6,\r\n\r\n        // return a { year: number, month: number, day: number } object\r\n        getToday(gregorainTodayObject) {\r\n            return gregorainTodayObject;\r\n        },\r\n\r\n        // return a native JavaScript date here\r\n        toNativeDate(date) {\r\n            return new Date(date.year, date.month - 1, date.day);\r\n        },\r\n\r\n        // return a number for date's month length\r\n        getMonthLength(date) {\r\n            return new Date(date.year, date.month, 0).getDate();\r\n        },\r\n\r\n        // return a transformed digit to your locale\r\n        transformDigit(digit) {\r\n            return digit;\r\n        },\r\n\r\n        // texts in the date picker\r\n        nextMonth: \"Следующий\",\r\n        previousMonth: \"Предыдущий\",\r\n        openMonthSelector: \"Открыть\",\r\n        openYearSelector: \"Открыть\",\r\n        closeMonthSelector: \"Закрыть\",\r\n        closeYearSelector: \"Закрыть\",\r\n        defaultPlaceholder: \"\",\r\n\r\n        // for input range value\r\n        from: \"От\",\r\n        to: \"До\",\r\n\r\n        // used for input value when multi dates are selected\r\n        digitSeparator: \",\",\r\n\r\n        // if your provide -2 for example, year will be 2 digited\r\n        yearLetterSkip: 0,\r\n\r\n        // is your language rtl or ltr?\r\n        isRtl: false,\r\n    };\r\n\r\n    const [selectedDay, setSelectedDay] = useState(defaultValue);\r\n\r\n    const renderCustomInput = ({ ref }) => (\r\n        <input\r\n            readOnly\r\n            ref={ref}\r\n            placeholder={props.placeholder}\r\n            value={selectedDay ? `${selectedDay.day}/${selectedDay.month}/${selectedDay.year}` : \"\"}\r\n            className=\"input datepicker__input\"\r\n        />\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"datepicker__wrapper\">\r\n                Date from\r\n                <DatePicker\r\n                    value={selectedDay}\r\n                    onChange={(value) => {\r\n                        props.callback(value);\r\n                        setSelectedDay(value);\r\n                    }}\r\n                    renderInput={renderCustomInput}\r\n                    locale={myCustomLocale}\r\n                    shouldHighlightWeekends\r\n                    // maximumDate={utils().getToday()}\r\n                    calendarPopperPosition=\"bottom\"\r\n                    colorPrimary=\"#2fa8ec\"\r\n                    colorPrimaryLight=\"#2fa8ec\"\r\n                    calendarClassName=\"datepicker\"\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};"]}]}