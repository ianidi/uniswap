{"remainingRequest":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\node_modules\\ts-loader\\index.js??ref--16-1!C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\App.tsx","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\App.tsx","mtime":1623764761367},{"path":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623606005702},{"path":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\node_modules\\ts-loader\\index.js","mtime":1623606013480}],"contextDependencies":[],"result":["var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { TableComponent } from './Table';\r\nimport { Datepicker } from './components/datepicker';\r\nvar SWAPS_QUERY = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  query swaps($sender: String) {\\n    swaps(orderBy: timestamp, orderDirection: desc, where: { sender: $sender }) {\\n      id\\n      transaction { id }\\n      sender\\n      timestamp\\n      sender\\n      recipient\\n      origin\\n      token0 { symbol, name }\\n      token1 { symbol, name }\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n  }\\n\"], [\"\\n  query swaps($sender: String) {\\n    swaps(orderBy: timestamp, orderDirection: desc, where: { sender: $sender }) {\\n      id\\n      transaction { id }\\n      sender\\n      timestamp\\n      sender\\n      recipient\\n      origin\\n      token0 { symbol, name }\\n      token1 { symbol, name }\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n  }\\n\"])));\r\nvar AppContext = React.createContext('');\r\nvar Swaps = function () {\r\n    var sender = useContext(AppContext);\r\n    var _a = useQuery(SWAPS_QUERY, {\r\n        variables: { sender: sender },\r\n        notifyOnNetworkStatusChange: true,\r\n    }), loading = _a.loading, error = _a.error, data = _a.data, refetch = _a.refetch, networkStatus = _a.networkStatus;\r\n    useEffect(function () {\r\n        refetch();\r\n    }, [sender]);\r\n    if (loading || networkStatus === NetworkStatus.refetch) {\r\n        return React.createElement(CircularProgress, { size: 20 });\r\n    }\r\n    if (error) {\r\n        return React.createElement(React.Fragment, null, error.message);\r\n    }\r\n    return (React.createElement(React.Fragment, null, data && data.swaps && data.swaps.length > 0 && React.createElement(TableComponent, { rows: data.swaps, headCells: headCells })));\r\n};\r\nvar headCells = [\r\n    { id: \"tx\", disablePadding: true, label: \"tx\" },\r\n    { id: \"description\", disablePadding: false, label: \"description\" },\r\n    { id: \"date\", disablePadding: false, label: \"date\" },\r\n    { id: \"sender\", disablePadding: false, label: \"sender\" },\r\n    { id: \"recipient\", disablePadding: false, label: \"recipient\" },\r\n    { id: \"amountUSD\", disablePadding: false, label: \"USD amount\" },\r\n];\r\nvar App = function () {\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Form, null,\r\n            React.createElement(Swaps, null))));\r\n};\r\nfunction Form(_a) {\r\n    var children = _a.children;\r\n    var _b = useState(\"0xe592427a0aece92de3edee1f18e0157c05861564\"), wallet = _b[0], setWallet = _b[1];\r\n    var _c = useState(\"\"), sender = _c[0], setSender = _c[1];\r\n    var _d = React.useState(new Date('2014-08-18T21:11:54')), selectedDate = _d[0], setSelectedDate = _d[1];\r\n    var update = function () {\r\n        setSender(wallet);\r\n    };\r\n    var handleDateChange = function (date) {\r\n        setSelectedDate(date);\r\n    };\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(AppContext.Provider, { value: sender },\r\n            React.createElement(\"form\", { noValidate: true, autoComplete: \"off\" },\r\n                React.createElement(TextField, { label: \"Wallet address\", value: wallet, onChange: function (e) { return setWallet(e.target.value); }, style: { minWidth: 400 } })),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(Grid, { container: true, alignItems: \"flex-start\" },\r\n                React.createElement(Datepicker, null)),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", onClick: update }, \"Search\"),\r\n            React.createElement(\"br\", null),\r\n            children)));\r\n}\r\nexport default App;\r\nvar templateObject_1;\r\n",{"version":3,"file":"C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\App.tsx","sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\work\\uniswap\\src\\App.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { gql, useQuery, NetworkStatus } from \"@apollo/client\";\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TableComponent } from './Table';\nimport { Datepicker } from './components/datepicker';\n//, timestamp_gte: \"10000000000\", timestamp_lte: \"10000000000\"\nconst SWAPS_QUERY = gql`\n  query swaps($sender: String) {\n    swaps(orderBy: timestamp, orderDirection: desc, where: { sender: $sender }) {\n      id\n      transaction { id }\n      sender\n      timestamp\n      sender\n      recipient\n      origin\n      token0 { symbol, name }\n      token1 { symbol, name }\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`;\n\nconst AppContext = React.createContext('');\n\nconst Swaps = () => {\n  const sender = useContext(AppContext);\n\n  const { loading, error, data, refetch, networkStatus } = useQuery(SWAPS_QUERY, {\n    variables: { sender },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [sender])\n\n  if (loading || networkStatus === NetworkStatus.refetch) {\n    return <CircularProgress size={20} />;\n  }\n\n  if (error) {\n    return <>{error.message}</>;\n  }\n\n  return (\n    <>\n      {data && data.swaps && data.swaps.length > 0 && <TableComponent rows={data.swaps} headCells={headCells} />}\n    </>\n  )\n};\n\nconst headCells = [\n  { id: \"tx\", disablePadding: true, label: \"tx\" },\n  { id: \"description\", disablePadding: false, label: \"description\" },\n  { id: \"date\", disablePadding: false, label: \"date\" },\n  { id: \"sender\", disablePadding: false, label: \"sender\" },\n  { id: \"recipient\", disablePadding: false, label: \"recipient\" },\n  { id: \"amountUSD\", disablePadding: false, label: \"USD amount\" },\n];\n\nconst App = () => {\n\n\n  return (\n    <div>\n      <Form>\n        <Swaps />\n      </Form>\n    </div>\n  )\n};\n\n\nfunction Form({ children }) {\n  const [wallet, setWallet] = useState(\"0xe592427a0aece92de3edee1f18e0157c05861564\");\n  const [sender, setSender] = useState(\"\");\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\n\n  const update = () => {\n    setSender(wallet)\n  }\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div>\n      <AppContext.Provider value={sender}>\n        <form noValidate autoComplete=\"off\">\n          <TextField label=\"Wallet address\" value={wallet} onChange={e => setWallet(e.target.value)} style={{ minWidth: 400 }} />\n        </form>\n        <br />\n\n        <Grid container alignItems=\"flex-start\">\n          <Datepicker />\n        </Grid>\n\n        <br />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={update}>Search</Button>\n        <br />\n        {children}\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]}]}